{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/_helpers/auth.guard.ts","webpack:///src/app/_helpers/auth.interceptor.ts","webpack:///src/app/_services/auth.service.ts","webpack:///src/app/_services/employee.service.ts","webpack:///src/app/_services/employee.ts","webpack:///src/app/_services/token-storage.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/create-employee/create-employee.component.ts","webpack:///src/app/create-employee/create-employee.component.html","webpack:///src/app/employee-details/employee-details.component.ts","webpack:///src/app/employee-details/employee-details.component.html","webpack:///src/app/employee-list/employee-list.component.ts","webpack:///src/app/employee-list/employee-list.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/update-employee/update-employee.component.ts","webpack:///src/app/update-employee/update-employee.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AuthGuard","token","router","route","state","getToken","navigate","providedIn","TOKEN_HEADER_KEY","AuthInterceptor","next","console","log","authReq","clone","headers","set","handle","authInterceptorProviders","provide","useClass","multi","AUTH_API","httpOptions","AuthService","http","username","password","post","email","EmployeeService","httpClient","baseURL","get","employee","put","Employee","TOKEN_KEY","USER_KEY","TokenStorageService","window","sessionStorage","clear","removeItem","setItem","getItem","user","JSON","stringify","parse","routes","path","canActivate","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","tokenStorageService","title","roles","isLoggedIn","showAdminBoard","showModeratorBoard","getUser","includes","signOut","r","location","reload","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","CreateEmployeeComponent","employeeService","noAccess","createEmployee","subscribe","data","goToEmployeeList","error","status","saveEmployee","onSubmit","EmployeeDetailsComponent","employeService","snapshot","params","getEmployeeById","EmployeeListComponent","getEmployees","getEmployeesList","employees","deleteEmployee","LoginComponent","authService","tokenStorage","form","isLoginFailed","errorMessage","login","saveToken","accessToken","saveUser","reloadPage","err","message","ProfileComponent","currentUser","RegisterComponent","isSuccessful","isSignUpFailed","register","UpdateEmployeeComponent","updateEmployee","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {TokenStorageService} from '../_services/token-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private token: TokenStorageService,\n    private router: Router){}\n\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const token = this.token.getToken();\n    if (token != null) {\n      return true;\n    } else {\n      this.router.navigate(['login']);\n      return false;\n    }\n  }\n\n}\n","import { HTTP_INTERCEPTORS, HttpEvent } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\n\nimport { TokenStorageService } from '../_services/token-storage.service';\nimport { Observable } from 'rxjs';\nimport {Router} from '@angular/router';\n\nconst TOKEN_HEADER_KEY = 'Authorization';       // for Spring Boot back-end\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(\n    private token: TokenStorageService,\n    private router: Router\n  ) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    console.log(\"Request Intercepted\");\n    let authReq = req;\n    const token = this.token.getToken();\n    if (token != null) {\n      // for Spring Boot back-end\n      authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\n    } else {\n      this.router.navigate(['login']);\n    }\n    return next.handle(authReq);\n  }\n}\n\nexport const authInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\n];\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst AUTH_API = 'http://localhost:8080/api/auth/';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private http: HttpClient) { }\n\n  login(username: string, password: string): Observable<any> {\n    return this.http.post(AUTH_API + 'signin', {\n      username,\n      password\n    }, httpOptions);\n  }\n\n  register(username: string, email: string, password: string): Observable<any> {\n    return this.http.post(AUTH_API + 'signup', {\n      username,\n      email,\n      password\n    }, httpOptions);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\nimport { Observable } from 'rxjs';\nimport { Employee } from './employee';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n\n  private baseURL = 'http://localhost:8080/api/v1/employees';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getEmployeesList(): Observable<Employee[]>{\n    return this.httpClient.get<Employee[]>(`${this.baseURL}`);\n  }\n\n  createEmployee(employee: Employee): Observable<Object>{\n    return this.httpClient.post(`${this.baseURL}`, employee);\n  }\n\n  getEmployeeById(id: number): Observable<Employee>{\n    return this.httpClient.get<Employee>(`${this.baseURL}/${id}`);\n  }\n\n  updateEmployee(id: number, employee: Employee): Observable<Object>{\n    return this.httpClient.put(`${this.baseURL}/${id}`, employee);\n  }\n\n  deleteEmployee(id: number): Observable<Object>{\n    return this.httpClient.delete(`${this.baseURL}/${id}`);\n  }\n}\n","export class Employee {\n    id: number;\n    firstName: string;\n    lastName: string;\n    email: string;\n}\n","import { Injectable } from '@angular/core';\n\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStorageService {\n  constructor() { }\n\n  signOut(): void {\n    window.sessionStorage.clear();\n  }\n\n  public saveToken(token: string): void {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n\n  public getToken(): string | null {\n    return window.sessionStorage.getItem(TOKEN_KEY);\n  }\n\n  public saveUser(user: any): void {\n    window.sessionStorage.removeItem(USER_KEY);\n    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n  public getUser(): any {\n    const user = window.sessionStorage.getItem(USER_KEY);\n    if (user) {\n      return JSON.parse(user);\n    }\n\n    return {};\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { EmployeeListComponent } from './employee-list/employee-list.component';\nimport { CreateEmployeeComponent } from './create-employee/create-employee.component';\nimport { UpdateEmployeeComponent } from './update-employee/update-employee.component';\nimport { EmployeeDetailsComponent } from './employee-details/employee-details.component';\nimport {RegisterComponent} from './register/register.component';\nimport {LoginComponent} from './login/login.component';\nimport {ProfileComponent} from './profile/profile.component';\nimport {AuthGuard} from './_helpers/auth.guard';\n\nconst routes: Routes = [\n  {path: 'employees', canActivate: [AuthGuard], component: EmployeeListComponent},\n  {path: 'create-employee', canActivate: [AuthGuard], component: CreateEmployeeComponent},\n  {path: '', redirectTo: 'login', pathMatch: 'full'},\n  {path: 'update-employee/:id', canActivate: [AuthGuard], component: UpdateEmployeeComponent},\n  {path: 'employee-details/:id', canActivate: [AuthGuard], component: EmployeeDetailsComponent},\n  {path: 'register', component: RegisterComponent},\n  {path: 'login', component: LoginComponent},\n  {path: 'profile', canActivate: [AuthGuard], component: ProfileComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {TokenStorageService} from './_services/token-storage.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'Angular - Spring Boot - Spring Security with JWT';\n  private roles: string[] = [];\n  isLoggedIn = false;\n  showAdminBoard = false;\n  showModeratorBoard = false;\n  username?: string;\n\n  constructor(\n    private tokenStorageService: TokenStorageService,\n    private router : Router\n  ) { }\n\n  ngOnInit(): void {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    console.log(\"Logged IN : \",this.tokenStorageService.getToken());\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      console.log(user);\n      this.roles = user.roles;\n\n      this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n      this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n\n      this.username = user.username;\n    }\n  }\n\n  logout(): void {\n    this.tokenStorageService.signOut();\n    this.isLoggedIn = false;\n    this.router.navigate(['login']).then(r =>\n      window.location.reload()\n    );\n  }\n}\n","<nav class=\"navbar justify-content-center navbar-expand-sm bg-info navbar-dark\">\n  <h3 class=\"text-center font-weight-bolder\"> {{title}} </h3>\n</nav>\n<nav class=\"navbar navbar-expand navbar-dark bg-dark\">\n  <ul class=\"navbar-nav justify-content-center\" *ngIf=\"!isLoggedIn\">\n    <li class=\"nav-item\">\n      <a href=\"/register\" class=\"nav-link font-weight-bolder\" routerLink=\"register\">Register</a>\n    </li>\n    <li class=\"nav-item\">\n      <a href=\"/login\" class=\"nav-link font-weight-bolder\" routerLink=\"login\">Login</a>\n    </li>\n  </ul>\n\n  <ul class=\"navbar-nav ml-auto\" *ngIf=\"isLoggedIn\">\n    <li class=\"nav-item\">\n      <a href=\"/profile\" class=\"nav-link\" routerLink=\"profile\">{{ username }}</a>\n    </li>\n    <li class = \"nav-item\">\n      <a routerLink=\"employees\" routerLinkActive=\"active\" class=\"nav-link font-weight-bolder\" >Employee List</a>\n    </li>\n    <li class = \"nav-item\">\n      <a routerLink=\"create-employee\" routerLinkActive=\"active\" class=\"nav-link font-weight-bolder\" >Add Employee</a>\n    </li>\n    <li class=\"nav-item\">\n      <a href class=\"nav-link\" (click)=\"logout()\">LogOut</a>\n    </li>\n  </ul>\n</nav>\n<br>\n<div class = \"container\">\n    <router-outlet></router-outlet>\n</div>\n<footer class = \"footer\">\n    <div class = \"container\">\n        <h5> All Rights Reserved 2022 </h5>\n    </div>\n</footer>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http'\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { EmployeeListComponent } from './employee-list/employee-list.component';\nimport { CreateEmployeeComponent } from './create-employee/create-employee.component';\nimport { FormsModule} from '@angular/forms';\nimport { UpdateEmployeeComponent } from './update-employee/update-employee.component';\nimport { EmployeeDetailsComponent } from './employee-details/employee-details.component'\nimport {authInterceptorProviders} from './_helpers/auth.interceptor';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport {ProfileComponent} from './profile/profile.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    EmployeeListComponent,\n    CreateEmployeeComponent,\n    ProfileComponent,\n    UpdateEmployeeComponent,\n    EmployeeDetailsComponent,\n    LoginComponent,\n    RegisterComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [authInterceptorProviders],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Employee } from '../_services/employee';\nimport { EmployeeService } from '../_services/employee.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-create-employee',\n  templateUrl: './create-employee.component.html',\n  styleUrls: ['./create-employee.component.css']\n})\nexport class CreateEmployeeComponent implements OnInit {\n\n  employee: Employee = new Employee();\n  noAccess = false;\n  constructor(private employeeService: EmployeeService,\n              private router: Router) { }\n\n  ngOnInit(): void {\n    this.noAccess = false;\n  }\n\n  saveEmployee(){\n    this.employeeService.createEmployee(this.employee).subscribe( data => {\n      console.log(data);\n      this.goToEmployeeList();\n    },\n    error => {\n      console.log(error);\n      if (error.status === 403) {\n        this.noAccess = true;\n      }\n    });\n  }\n\n  goToEmployeeList(){\n    this.router.navigate(['/employees']);\n  }\n\n  onSubmit(){\n    console.log(this.employee);\n    this.saveEmployee();\n  }\n}\n","<div class=\"col-md-12\">\n  <div class=\"card card-container\">\n\n    <h3> Add Employee </h3>\n    <br>\n    <form (ngSubmit) = \"onSubmit()\">\n\n        <div class=\"form-group\">\n            <label> First Name</label>\n            <input type=\"text\" class =\"form-control\" id = \"firstName\"\n                [(ngModel)] = \"employee.firstName\" name = \"firstName\">\n        </div>\n\n        <div class=\"form-group\">\n            <label> Last Name</label>\n            <input type=\"text\" class =\"form-control\" id = \"lastName\"\n                [(ngModel)] = \"employee.lastName\" name = \"lastName\">\n        </div>\n\n        <div class=\"form-group\">\n            <label> Email Id</label>\n            <input type=\"text\" class =\"form-control\" id = \"email\"\n                [(ngModel)] = \"employee.email\" name = \"email\">\n        </div>\n\n      <div class=\"form-group\">\n        <p *ngIf=\"noAccess\" class=\"text-danger\"> You don't have access to add employee</p>\n        <button class=\"btn btn-primary btn-block\">Submit</button>\n      </div>\n\n    </form>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Employee } from '../_services/employee';\nimport { ActivatedRoute } from '@angular/router';\nimport { EmployeeService } from '../_services/employee.service';\n\n@Component({\n  selector: 'app-employee-details',\n  templateUrl: './employee-details.component.html',\n  styleUrls: ['./employee-details.component.css']\n})\nexport class EmployeeDetailsComponent implements OnInit {\n\n  id: number\n  employee: Employee\n  constructor(private route: ActivatedRoute, private employeService: EmployeeService) { }\n\n  ngOnInit(): void {\n    this.id = this.route.snapshot.params['id'];\n\n    this.employee = new Employee();\n    this.employeService.getEmployeeById(this.id).subscribe( data => {\n      this.employee = data;\n    });\n  }\n\n}\n","<h3>Employee Details</h3>\n<br>\n<div>\n    <div>\n        <label> <b> First Name: </b></label> {{employee.firstName}}\n    </div>\n    <div>\n        <label> <b> Last Name: </b></label> {{employee.lastName}}\n    </div>\n    <div>\n        <label> <b> Email Id: </b></label> {{employee.email}}\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Employee } from '../_services/employee';\nimport { EmployeeService } from '../_services/employee.service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-employee-list',\n  templateUrl: './employee-list.component.html',\n  styleUrls: ['./employee-list.component.css']\n})\nexport class EmployeeListComponent implements OnInit {\n\n  employees: Employee[];\n  noAccess = false;\n\n  constructor(private employeeService: EmployeeService,\n              private router: Router) { }\n\n  ngOnInit(): void {\n    this.noAccess = false;\n    this.getEmployees();\n  }\n\n  private getEmployees(){\n    this.employeeService.getEmployeesList().subscribe(data => {\n      this.employees = data;\n    });\n  }\n\n  employeeDetails(id: number){\n    this.router.navigate(['employee-details', id]);\n  }\n\n  updateEmployee(id: number){\n    this.router.navigate(['update-employee', id]);\n  }\n\n  deleteEmployee(id: number){\n    this.employeeService.deleteEmployee(id).subscribe( data => {\n      console.log(data);\n      this.getEmployees();\n    },\n      error => {\n        if (error.status === 403) {\n          this.noAccess = true;\n        }\n      });\n  }\n}\n","<h2> Employee List</h2>\n<table class = \"table table-striped\">\n    <thead>\n        <tr>\n            <th> First Name</th>\n            <th> Last Name </th>\n            <th> Email Id</th>\n            <th> Actions </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor = \"let employee of employees\" >\n            <td> {{ employee.firstName }} </td>\n            <td> {{ employee.lastName }} </td>\n            <td> {{ employee.email }} </td>\n            <td>\n                <button (click) = \"updateEmployee(employee.id)\" class = \"btn btn-info\"> Update</button>\n                <button (click) = \"deleteEmployee(employee.id)\" class = \"btn btn-danger\" style=\"margin-left: 10px\"> Delete</button>\n                <button (click) = \"employeeDetails(employee.id)\" class = \"btn btn-info\" style=\"margin-left: 10px\"> View</button>\n            </td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<p *ngIf=\"noAccess\" class=\"text-danger\"> You don't have access to delete employee</p>\n\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { TokenStorageService } from '../_services/token-storage.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {\n    username: null,\n    password: null\n  };\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n\n  constructor(private authService: AuthService, private tokenStorage: TokenStorageService) { }\n\n  ngOnInit(): void {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n  }\n\n  onSubmit(): void {\n    const { username, password } = this.form;\n\n    this.authService.login(username, password).subscribe(\n      data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.reloadPage();\n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n  reloadPage(): void {\n    window.location.reload();\n  }\n}\n","<div class=\"col-md-12\">\n  <div class=\"card card-container\">\n    <h3> Login </h3>\n    <br>\n    <form\n      *ngIf=\"!isLoggedIn\"\n      name=\"form\"\n      (ngSubmit)=\"f.form.valid && onSubmit()\"\n      #f=\"ngForm\"\n      novalidate\n    >\n      <div class=\"form-group\">\n        <label for=\"username\">Username</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          name=\"username\"\n          [(ngModel)]=\"form.username\"\n          required\n          #username=\"ngModel\"\n        />\n        <div\n          class=\"alert alert-danger\"\n          role=\"alert\"\n          *ngIf=\"username.errors && f.submitted\"\n        >\n          Username is required!\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">Password</label>\n        <input\n          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          [(ngModel)]=\"form.password\"\n          required\n          minlength=\"5\"\n          #password=\"ngModel\"\n        />\n        <div\n          class=\"alert alert-danger\"\n          role=\"alert\"\n          *ngIf=\"password.errors && f.submitted\"\n        >\n          <div *ngIf=\"password.errors.required\">Password is required</div>\n          <div *ngIf=\"password.errors.minlength\">\n            Password must be at least 6 characters\n          </div>\n        </div>\n      </div>\n      <br>\n      <div class=\"form-group\">\n        <button class=\"btn btn-primary btn-block\">\n          Login\n        </button>\n      </div>\n      <div class=\"form-group\">\n        <div\n          class=\"alert alert-danger\"\n          role=\"alert\"\n          *ngIf=\"f.submitted && isLoginFailed\"\n        >\n          Login failed: {{ errorMessage }}\n        </div>\n      </div>\n    </form>\n\n    <div class=\"alert alert-success\" *ngIf=\"isLoggedIn\">\n      Logged in as {{ roles }}.\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from '../_services/token-storage.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  currentUser: any;\n\n  constructor(private token: TokenStorageService) { }\n\n  ngOnInit(): void {\n    this.currentUser = this.token.getUser();\n  }\n}\n","<div class=\"container\" *ngIf=\"currentUser; else loggedOut\">\n  <nav class=\"navbar navbar-light bg-info\">\n    <h4>\n      Profile : <strong>{{ currentUser.username }}</strong>\n    </h4>\n  </nav>\n  <br>\n  <p>\n    <strong>Token:</strong>\n    {{ currentUser.accessToken.substring(0, 20) }} ...\n    {{ currentUser.accessToken.substr(currentUser.accessToken.length - 20) }}\n  </p>\n  <p>\n    <strong>Email:</strong>\n    {{ currentUser.email }}\n  </p>\n  <strong>Roles:</strong>\n  <ul>\n    <li *ngFor=\"let role of currentUser.roles\">\n      {{ role }}\n    </li>\n  </ul>\n</div>\n\n<ng-template #loggedOut>\n  Please login.\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  form: any = {\n    username: null,\n    email: null,\n    password: null\n  };\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(): void {\n    const { username, email, password } = this.form;\n\n    this.authService.register(username, email, password).subscribe(\n      data => {\n        console.log(data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    );\n  }\n}\n","<div class=\"col-md-12\">\n  <div class=\"card card-container\">\n    <h3> Register </h3>\n    <br>\n    <form\n      *ngIf=\"!isSuccessful\"\n      name=\"form\"\n      (ngSubmit)=\"f.form.valid && onSubmit()\"\n      #f=\"ngForm\"\n      novalidate\n    >\n      <div class=\"form-group\">\n        <label for=\"username\">Username</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          name=\"username\"\n          [(ngModel)]=\"form.username\"\n          required\n          minlength=\"3\"\n          maxlength=\"20\"\n          #username=\"ngModel\"\n        />\n        <div class=\"alert-danger\" *ngIf=\"username.errors && f.submitted\">\n          <div *ngIf=\"username.errors.required\">Username is required</div>\n          <div *ngIf=\"username.errors.minlength\">\n            Username must be at least 3 characters\n          </div>\n          <div *ngIf=\"username.errors.maxlength\">\n            Username must be at most 20 characters\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"email\">Email</label>\n        <input\n          type=\"email\"\n          class=\"form-control\"\n          name=\"email\"\n          [(ngModel)]=\"form.email\"\n          required\n          email\n          #email=\"ngModel\"\n        />\n        <div class=\"alert-danger\" *ngIf=\"email.errors && f.submitted\">\n          <div *ngIf=\"email.errors.required\">Email is required</div>\n          <div *ngIf=\"email.errors.email\">\n            Email must be a valid email address\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">Password</label>\n        <input\n          type=\"password\"\n          class=\"form-control\"\n          name=\"password\"\n          [(ngModel)]=\"form.password\"\n          required\n          minlength=\"5\"\n          #password=\"ngModel\"\n        />\n        <div class=\"alert-danger\" *ngIf=\"password.errors && f.submitted\">\n          <div *ngIf=\"password.errors.required\">Password is required</div>\n          <div *ngIf=\"password.errors.minlength\">\n            Password must be at least 6 characters\n          </div>\n        </div>\n      </div>\n      <br>\n      <div class=\"form-group\">\n        <button class=\"btn btn-primary btn-block\">Sign Up</button>\n      </div>\n\n      <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\n        Signup failed!<br />{{ errorMessage }}\n      </div>\n    </form>\n\n    <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\n      Your registration is successful!\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { EmployeeService } from '../_services/employee.service';\nimport { Employee } from '../_services/employee';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-update-employee',\n  templateUrl: './update-employee.component.html',\n  styleUrls: ['./update-employee.component.css']\n})\nexport class UpdateEmployeeComponent implements OnInit {\n\n  id: number;\n  employee: Employee = new Employee();\n  constructor(private employeeService: EmployeeService,\n              private route: ActivatedRoute,\n              private router: Router) { }\n  noAccess : boolean = false;\n\n  ngOnInit(): void {\n    this.noAccess = false;\n    this.id = this.route.snapshot.params.id;\n\n    this.employeeService.getEmployeeById(this.id).subscribe(data => {\n      this.employee = data;\n    }, error => console.log(error));\n  }\n\n  onSubmit(){\n    this.employeeService.updateEmployee(this.id, this.employee).subscribe(\n      data => { this.goToEmployeeList(); },\n      error => {\n        console.log(error.status);\n        if ( error.status === 403 ) {\n          this.noAccess = true;\n          console.log('No Access');\n        }\n      }\n      );\n  }\n\n  goToEmployeeList(){\n    this.router.navigate(['/employees']);\n  }\n}\n","<div class=\"col-md-6 offset-md-3\">\n    <h3> Update Employee </h3>\n    <form (ngSubmit) = \"onSubmit()\">\n\n        <div class=\"form-group\">\n            <label> First Name</label>\n            <input type=\"text\" class =\"form-control\" id = \"firstName\"\n                [(ngModel)] = \"employee.firstName\" name = \"firstName\">\n        </div>\n\n        <div class=\"form-group\">\n            <label> Last Name</label>\n            <input type=\"text\" class =\"form-control\" id = \"lastName\"\n                [(ngModel)] = \"employee.lastName\" name = \"lastName\">\n        </div>\n\n        <div class=\"form-group\">\n            <label> Email Id</label>\n            <input type=\"text\" class =\"form-control\" id = \"email\"\n                [(ngModel)] = \"employee.email\" name = \"email\">\n        </div>\n\n        <p *ngIf=\"noAccess\" class=\"text-danger\"> You don't have access to update employee</p>\n        <button class = \"btn btn-success\" type =\"submit\">Submit </button>\n\n\n    </form>\n\n    </div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}